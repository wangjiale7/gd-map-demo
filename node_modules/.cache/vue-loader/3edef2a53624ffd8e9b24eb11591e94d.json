{"remainingRequest":"/Users/jiale/development/front/map-vue-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiale/development/front/map-vue-demo/src/components/GDMap/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiale/development/front/map-vue-demo/src/components/GDMap/index.vue","mtime":1668735703588},{"path":"/Users/jiale/development/front/map-vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jiale/development/front/map-vue-demo/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/jiale/development/front/map-vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jiale/development/front/map-vue-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"src/components/GDMap","sourcesContent":["<template>\n  <div class=\"gd-map\">\n    <div class=\"search-card\">\n      <!-- <label style=\"color: grey\">地理编码，根据地址获取经纬度坐标</label> -->\n      <section class=\"gd-search flex-rb\">\n        <div>\n          <el-select v-model=\"province\" placeholder=\"省份\">\n            <el-option\n              v-for=\"item in provinceList\"\n              :key=\"item.adcode\"\n              :label=\"item.name\"\n              :value=\"item.adcode\"\n            >\n            </el-option>\n          </el-select>\n          <el-select v-model=\"city\" placeholder=\"地级市\">\n            <el-option\n              v-for=\"item in cityList\"\n              :key=\"item.adcode\"\n              :label=\"item.name\"\n              :value=\"item.adcode\"\n            >\n            </el-option>\n          </el-select>\n          <el-select placeholder=\"区县\" v-model=\"region\">\n            <el-option\n              v-for=\"item in regionList\"\n              :key=\"item.adcode\"\n              :label=\"item.name\"\n              :value=\"item.adcode\"\n            >\n            </el-option>\n          </el-select>\n          <el-select placeholder=\"街道\" v-model=\"street\">\n            <el-option\n              v-for=\"(item, idx) in streetList\"\n              :key=\"item.adcode - idx\"\n              :label=\"item.name\"\n              :value=\"item.adcode\"\n            >\n            </el-option>\n          </el-select>\n          <!-- {{ searchTip }} -->\n          <el-select\n            id=\"searchTip\"\n            v-model=\"searchTip\"\n            filterable\n            remote\n            placeholder=\"请输入关键词\"\n            :remote-method=\"getPosiList\"\n            :loading=\"loading\"\n            @blur=\"selectBlur\"\n          >\n            <el-option\n              v-for=\"item in list\"\n              :key=\"item.id\"\n              :value=\"item.id\"\n              :label=\"item.name\"\n            >\n              {{ item.name }}\n              <span\n                style=\"color: #999; margin-left: 10px; font-size: 12px\"\n                class=\"posi-dis\"\n                >{{ item.district }}</span\n              >\n            </el-option>\n          </el-select>\n          <i class=\"el-icon-search\" @click=\"getGeoCode\" title=\"查询\"></i>\n          <i class=\"el-icon-close\" @click=\"resetSearch\" title=\"清楚\"></i>\n        </div>\n\n        <div class=\"flex-cc\">\n          <div>选择半径KM</div>\n          <el-select v-model=\"km\">\n            <el-option\n              v-for=\"item in kmList\"\n              :key=\"item\"\n              :value=\"item\"\n              :label=\"item + 'KM'\"\n            >\n            </el-option>\n          </el-select>\n        </div>\n      </section>\n      <div class=\"info\" :class=\"[currentPosi.length && 'show']\">\n        {{ currentPosi }}\n        <ul class=\"serp-list\">\n          <li v-for=\"itme in currentPosi\" :key=\"itme.id\">\n            <div class=\"poi-info-left\">\n              <h3 class=\"poi-title\">\n                <span class=\"poi-name\" title=\"都汇中心B座\"\n                  >1.&nbsp;{{ itme.name }}</span\n                >\n              </h3>\n              <div class=\"poi-info\">\n                <p class=\"poi-addr\">{{ itme | realInfo }}</p>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n    <div id=\"container\"></div>\n  </div>\n</template>\n<script>\n  import AMapLoader from '@amap/amap-jsapi-loader'\n  import { securityJsCode, AmapKey } from '@/utils/constants'\n\n  window._AMapSecurityConfig = {\n    securityJsCode\n  }\n  const radiusCircle = 3000\n  const initPosi = [114.063599, 22.548153]\n  export default {\n    name: 'gd-map',\n\n    data() {\n      return {\n        map: null,\n        AMap: null,\n        lnglatValue: null,\n        searchTip: '',\n        list: [],\n        loading: false,\n        markers: [],\n\n        provinceList: [],\n        province: '浙江省',\n        cityList: [],\n        city: '宁波市',\n        regionList: [],\n        region: '鄞州区',\n        streetList: [],\n        street: '福明街道',\n        kmList: [1, 2, 3],\n        km: 1\n      }\n    },\n    filters: {\n      realInfo(item) {\n        if (item.address && item.address.length) {\n          return item.address\n        } else {\n          return item.district\n        }\n      }\n    },\n    computed: {\n      currentPosi: function () {\n        return this.list.filter((ele) => ele.id === this.searchTip)\n      }\n    },\n    watch: {},\n    created() {},\n\n    mounted() {\n      //DOM初始化完成进行地图初始化\n      this.initMap()\n    },\n\n    methods: {\n      resetSearch() {\n        this.searchTip = null\n      },\n      selectBlur() {},\n\n      getPosiByLnglat(location) {\n        const AMap = this.AMap\n        AMap.plugin('AMap.Geocoder', () => {\n          var geocoder = new AMap.Geocoder({\n            // city 指定进行编码查询的城市，支持传入城市名、adcode 和 citycode\n            // city: '010',\n          })\n\n          var lnglat = [location.lng, location.lat]\n          geocoder.getAddress(lnglat, (status, result) => {\n            console.log(status, result)\n            if (status === 'complete' && result.info === 'OK') {\n              this.searchTip = result.regeocode.formattedAddress\n              this.getPosiList(this.searchTip)\n              // result为对应的地理位置详细信息\n            }\n          })\n        })\n      },\n      /**\n       * @description: 地址正编码\n       * @return {*}\n       */\n      getGeoCode() {\n        const AMap = this.AMap\n        const map = this.map\n        AMap.plugin('AMap.Geocoder', () => {\n          var geocoder = new AMap.Geocoder({\n            // city 指定进行编码查询的城市，支持传入城市名、adcode 和 citycode\n            // city: '010',\n          })\n          console.log(this.currentPosi)\n          if (this.currentPosi && this.currentPosi.length) {\n            geocoder.getLocation(this.currentPosi[0].name, (status, result) => {\n              console.log(result)\n              if (status === 'complete' && result.geocodes.length) {\n                var lnglat = result.geocodes[0].location\n                this.lnglatValue = JSON.stringify(lnglat)\n                console.log(lnglat)\n                this.clearMarker()\n                let marker = this.createMark(lnglat)\n                let circle = this.createCircle(lnglat)\n                this.markers = [marker, circle]\n                map.add(marker)\n                map.add(circle)\n                map.setFitView()\n              } else {\n                console.log(this)\n                this.$message.error('根据地址查询位置失败')\n              }\n            })\n          } else {\n            this.$message.error('请输入地址查询')\n          }\n        })\n      },\n      /**\n       * @description: 添加3d\n       * @return {*}\n       */\n      // 清除指定点\n      clearMarker() {\n        this.markers &&\n          this.markers.length &&\n          this.markers.forEach((ele) => {\n            ele.setMap(null)\n          })\n      },\n      createMark(location = {}) {\n        let { lng, lat } = location\n        // 创建一个 Marker 实例：\n        // 创建一个 Marker 实例：\n        let AMap = this.AMap\n        var marker = new AMap.Marker({\n          position: new AMap.LngLat(lng, lat) // 经纬度对象，也可以是经纬度构成的一维数组[116.39, 39.9]\n        })\n        return marker\n      },\n\n      createCircle(location = {}) {\n        let { lng, lat } = location\n        let AMap = this.AMap\n        var circle = new AMap.Circle({\n          center: [lng, lat],\n          radius: radiusCircle, //半径\n          borderWeight: 3,\n          strokeColor: '#FF33FF',\n          strokeOpacity: 1,\n          strokeWeight: 1,\n          fillOpacity: 0.4,\n          fillColor: '#1791fc',\n          zIndex: 50\n        })\n        return circle\n      },\n      clickMap(e) {\n        const map = this.map\n        var text =\n          '您在 [ ' +\n          e.lnglat.getLng() +\n          ',' +\n          e.lnglat.getLat() +\n          ' ] 的位置单击了地图！'\n\n        this.clearMarker()\n        let marker = this.createMark(e.lnglat)\n        let circle = this.createCircle(e.lnglat)\n        this.markers = [marker, circle]\n        map.add(marker)\n        map.add(circle)\n        map.setFitView()\n        this.getPosiByLnglat(e.lnglat)\n      },\n\n      initMap() {\n        AMapLoader.load({\n          key: AmapKey, // 申请好的Web端开发者Key，首次调用 load 时必填\n          version: '2.0', // 指定要加载的 JSAPI 的版本，缺省时默认为 1.4.15\n          plugins: [] // 需要使用的的插件列表，如比例尺'AMap.Scale'等\n        })\n          .then((AMap) => {\n            this.AMap = AMap\n            const map = new AMap.Map('container', {\n              //设置地图容器id\n              // pitch:75, // 地图俯仰角度，有效范围 0 度- 83 度\n              terrain: true, // 开启地形图\n              viewMode: '3D', //是否为3D地图模式\n              zoom: 13, //初始化地图级别\n              center: initPosi //初始化地图中心点位置\n            })\n            this.map = map\n\n            //添加点击事件\n            map.on('click', this.clickMap)\n\n            // 组合了旋转、倾斜、复位、缩放在内的地图控件，自V1.4.0版本新增。\n            AMap.plugin(['AMap.ControlBar'], function () {\n              var controlBar = new AMap.ControlBar({\n                position: {\n                  top: '10px',\n                  right: '10px'\n                }\n              })\n              map.addControl(controlBar)\n            })\n\n            //加载工具条\n            AMap.plugin(['AMap.ToolBar'], function () {\n              var tool = new AMap.ToolBar({\n                position: {\n                  right: '40px',\n                  top: '110px'\n                }\n              })\n              map.addControl(tool)\n            })\n            AMap.plugin(['AMap.Scale'], function () {\n              var Scale = new AMap.Scale({\n                position: {\n                  bottom: '20px',\n                  left: '20px'\n                }\n              })\n              map.addControl(Scale)\n            })\n\n            //--\n            this.setRangeArea()\n            //--\n          })\n\n          .catch((e) => {\n            console.log(e)\n          })\n      },\n      setRangeArea() {\n        const AMap = this.AMap\n        const map = this.map\n        this.getProvince()\n        this.getCity()\n        this.getRegion()\n        this.getStreet()\n        AMap.plugin('AMap.DistrictSearch', () => {\n          // 创建行政区查询对象\n          var district = new AMap.DistrictSearch({\n            // 返回行政区边界坐标等具体信息\n            extensions: 'all',\n            // 设置查询行政区级别为 区\n            level: 'district'\n          })\n\n          district.search('鄞州区', (status, result) => {\n            // 获取朝阳区的边界信息\n            var bounds = result.districtList[0].boundaries\n            let polygonArr = []\n            for (let i = 0, l = bounds.length; i < l; i++) {\n              polygonArr.push(bounds[i])\n            }\n            //生成行政区划polygon\n            var polygon = new AMap.Polygon({\n              map: map,\n              path: polygonArr,\n              strokeWeight: 1,\n              fillOpacity: 0.3,\n              fillColor: '#CCF3FF',\n              strokeColor: '#CC66CC'\n            })\n            // 添加覆盖物点击事件\n            polygon.on('click', (e) => {\n              this.clickMap(e)\n            })\n            // 地图自适应\n            map.setFitView()\n          })\n        })\n      },\n      getProvince() {\n        const AMap = this.AMap\n        const map = this.map\n        const that = this\n        AMap.plugin('AMap.DistrictSearch', function () {\n          var districtSearch = new AMap.DistrictSearch({\n            // 关键字对应的行政区级别，country表示国家\n            level: 'country',\n            //  显示下级行政区级数，1表示返回下一级行政区\n            subdistrict: 1\n          })\n\n          // 搜索所有省/直辖市信息\n          districtSearch.search('中国', function (status, result) {\n            // 查询成功时，result即为对应的行政区信息\n            console.log(result.districtList[0].districtList)\n            that.provinceList = result.districtList[0].districtList\n          })\n        })\n      },\n      getCity() {\n        const AMap = this.AMap\n        const map = this.map\n        const that = this\n        var districtSearch = new AMap.DistrictSearch({\n          level: 'province',\n          subdistrict: 1\n        })\n        // 搜索所有省/直辖市信息\n        districtSearch.search(this.province, (status, result) => {\n          // 查询成功时，result即为对应的行政区信息\n          console.log(result.districtList[0].districtList)\n          this.cityList = result.districtList[0].districtList\n        })\n      },\n\n      getRegion() {\n        const AMap = this.AMap\n        const map = this.map\n        var districtSearch = new AMap.DistrictSearch({\n          level: 'city',\n          subdistrict: 1\n        })\n        // 搜索所有省/直辖市信息\n        districtSearch.search(this.city, (status, result) => {\n          // 查询成功时，result即为对应的行政区信息\n          console.log(result.districtList[0].districtList)\n          this.regionList = result.districtList[0].districtList\n        })\n      },\n\n      getStreet() {\n        const AMap = this.AMap\n        const map = this.map\n        var districtSearch = new AMap.DistrictSearch({\n          level: 'district',\n          subdistrict: 1\n        })\n        districtSearch.search(this.region, (status, result) => {\n          console.log(result.districtList[0].districtList)\n          this.streetList = result.districtList[0].districtList\n        })\n      },\n\n      getPosiList(query) {\n        console.log(query)\n        const AMap = this.AMap\n        if (query !== '') {\n          this.loading = true\n          // JSAPI 2.0 输入提示插件名称由 AMap.Autocomplete 变更为 AMap.AutoComplete 啦！\n          AMap.plugin('AMap.AutoComplete', () => {\n            var autoOptions = {\n              //city 限定城市，默认全国\n              city: '全国'\n            }\n            // 实例化AutoComplete\n            var autoComplete = new AMap.AutoComplete(autoOptions)\n            // 根据关键字进行搜索\n            autoComplete.search(query, (status, result) => {\n              // 搜索成功时，result即是对应的匹配数据\n              console.log(status, result)\n              this.list = result.tips.map((ele) => ({\n                ...ele\n              }))\n              this.loading = false\n            })\n          })\n        } else {\n          this.options = []\n        }\n      }\n    }\n  }\n</script>\n\n<style scoped lang=\"less\">\n  #container {\n    height: 90vh;\n  }\n\n  .search-card {\n    // position: fixed;\n    left: 15px;\n    top: 15px;\n    // width: 200px;\n    // border: solid 1px #000;\n    background-color: #fff;\n\n    .gd-search {\n      padding: 0 12px;\n      border-radius: 3px;\n      height: 45px;\n      box-shadow: 0 2px 2px rgb(0 0 0 / 15%);\n\n      // padding: 10px 0;\n      label img {\n        width: 50px;\n        height: 50px;\n      }\n      .el-select:nth-of-type(5) {\n        width: 400px;\n      }\n      .el-select {\n        width: 120px;\n        border-radius: 0;\n        /deep/ .el-input__inner {\n          border-radius: 0;\n        }\n      }\n\n      i {\n        padding: 0 12px;\n        font-size: 20px;\n        height: 100%;\n        // line-height: 40px;\n        cursor: pointer;\n\n        &:hover {\n          color: lighten(#999, 0.5);\n        }\n      }\n    }\n\n    .info {\n      // padding: 0;\n      // padding: 12px 16px;\n      box-shadow: 1px 2px 1px rgb(0 0 0 / 10%);\n      max-height: 0;\n      // display: none;\n      transition: all 0.3s ease-in-out;\n      overflow: hidden;\n\n      ul {\n        list-style: none;\n\n        li {\n        }\n      }\n\n      .poi-info {\n        font-size: 14px;\n        color: #999;\n      }\n\n      &.show {\n        max-height: 200px;\n        // transition: none !important;\n        // display: block;\n      }\n    }\n  }\n</style>\n"]}]}