{"remainingRequest":"/Users/jiale/development/front/map-vue-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jiale/development/front/map-vue-demo/src/components/Sticky/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jiale/development/front/map-vue-demo/src/components/Sticky/index.vue","mtime":1669134425238},{"path":"/Users/jiale/development/front/map-vue-demo/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/Users/jiale/development/front/map-vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jiale/development/front/map-vue-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogJ1N0aWNreScsCiAgICBwcm9wczogewogICAgICBzdGlja3lUb3A6IHsKICAgICAgICB0eXBlOiBOdW1iZXIsCiAgICAgICAgZGVmYXVsdDogMAogICAgICB9LAogICAgICB6SW5kZXg6IHsKICAgICAgICB0eXBlOiBOdW1iZXIsCiAgICAgICAgZGVmYXVsdDogMQogICAgICB9LAogICAgICBjbGFzc05hbWU6IHsKICAgICAgICB0eXBlOiBTdHJpbmcsCiAgICAgICAgZGVmYXVsdDogJycKICAgICAgfQogICAgfSwKICAgIGRhdGEoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgYWN0aXZlOiBmYWxzZSwKICAgICAgICBwb3NpdGlvbjogJycsCiAgICAgICAgd2lkdGg6IHVuZGVmaW5lZCwKICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCwKICAgICAgICBpc1N0aWNreTogZmFsc2UsCiAgICAgICAgc2Nyb2xsRG9tOiBudWxsLAogICAgICAgIGxlZnQ6IDAKICAgICAgfQogICAgfSwKICAgIG1vdW50ZWQoKSB7CiAgICAgIHRoaXMuc2Nyb2xsRG9tID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2RyYXdlci13cmFwIC5lbC1kcmF3ZXJfX2JvZHknKQoKICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQKICAgICAgdGhpcy5zY3JvbGxEb20uYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVTY3JvbGwpCiAgICAgIHRoaXMuc2Nyb2xsRG9tLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlUmVzaXplKQogICAgfSwKICAgIGFjdGl2YXRlZCgpIHsKICAgICAgdGhpcy5oYW5kbGVTY3JvbGwoKQogICAgfSwKICAgIGRlc3Ryb3llZCgpIHsKICAgICAgY29uc29sZS5sb2coJ2Rlc3Ryb3llZCcpCiAgICAgIHRoaXMuc2Nyb2xsRG9tLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsKQogICAgICB0aGlzLnNjcm9sbERvbS5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLmhhbmRsZVJlc2l6ZSkKICAgIH0sCiAgICBtZXRob2RzOiB7CiAgICAgIHN0aWNreSgpIHsKICAgICAgICBpZiAodGhpcy5hY3RpdmUpIHsKICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICB0aGlzLnBvc2l0aW9uID0gJ2ZpeGVkJwogICAgICAgIHRoaXMuYWN0aXZlID0gdHJ1ZQogICAgICAgIHRoaXMud2lkdGggPSB0aGlzLndpZHRoICsgJ3B4JwogICAgICAgIHRoaXMuaXNTdGlja3kgPSB0cnVlCiAgICAgICAgdGhpcy5sZWZ0ID0gLWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0CiAgICAgIH0sCiAgICAgIGhhbmRsZVJlc2V0KCkgewogICAgICAgIGlmICghdGhpcy5hY3RpdmUpIHsKICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICB0aGlzLnJlc2V0KCkKICAgICAgfSwKICAgICAgcmVzZXQoKSB7CiAgICAgICAgdGhpcy5wb3NpdGlvbiA9ICcnCiAgICAgICAgdGhpcy53aWR0aCA9ICdhdXRvJwogICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2UKICAgICAgICB0aGlzLmlzU3RpY2t5ID0gZmFsc2UKICAgICAgfSwKICAgICAgaGFuZGxlU2Nyb2xsKCkgewogICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgKICAgICAgICB0aGlzLndpZHRoID0gd2lkdGggfHwgJ2F1dG8nCiAgICAgICAgY29uc3Qgb2Zmc2V0VG9wID0gdGhpcy4kZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wCiAgICAgICAgY29uc29sZS5sb2cob2Zmc2V0VG9wKQoKICAgICAgICBpZiAob2Zmc2V0VG9wIDwgdGhpcy5zdGlja3lUb3ApIHsKICAgICAgICAgIHRoaXMuc3RpY2t5KCkKICAgICAgICAgIGlmIChvZmZzZXRUb3AgPT09IDApIHsKICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXNldCgpCiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4KICAgICAgICB9CiAgICAgICAgdGhpcy5oYW5kbGVSZXNldCgpCiAgICAgIH0sCiAgICAgIGhhbmRsZVJlc2l6ZSgpIHsKICAgICAgICBpZiAodGhpcy5pc1N0aWNreSkgewogICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuJGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgJ3B4JwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/Sticky","sourcesContent":["<template>\n  <div :style=\"{ height: height + 'px', zIndex: zIndex }\">\n    <div\n      :class=\"className\"\n      :style=\"{\n        top: isSticky ? stickyTop + 'px' : '',\n        zIndex: zIndex,\n        position: position,\n        width: width,\n        height: height + 'px',\n        transform: `translateX(${left}px)`\n      }\"\n    >\n      <slot>\n        <div>sticky</div>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script>\n  export default {\n    name: 'Sticky',\n    props: {\n      stickyTop: {\n        type: Number,\n        default: 0\n      },\n      zIndex: {\n        type: Number,\n        default: 1\n      },\n      className: {\n        type: String,\n        default: ''\n      }\n    },\n    data() {\n      return {\n        active: false,\n        position: '',\n        width: undefined,\n        height: undefined,\n        isSticky: false,\n        scrollDom: null,\n        left: 0\n      }\n    },\n    mounted() {\n      this.scrollDom = document.querySelector('#drawer-wrap .el-drawer__body')\n\n      this.height = this.$el.getBoundingClientRect().height\n      this.scrollDom.addEventListener('scroll', this.handleScroll)\n      this.scrollDom.addEventListener('resize', this.handleResize)\n    },\n    activated() {\n      this.handleScroll()\n    },\n    destroyed() {\n      console.log('destroyed')\n      this.scrollDom.removeEventListener('scroll', this.handleScroll)\n      this.scrollDom.removeEventListener('resize', this.handleResize)\n    },\n    methods: {\n      sticky() {\n        if (this.active) {\n          return\n        }\n        this.position = 'fixed'\n        this.active = true\n        this.width = this.width + 'px'\n        this.isSticky = true\n        this.left = -document.documentElement.scrollLeft\n      },\n      handleReset() {\n        if (!this.active) {\n          return\n        }\n        this.reset()\n      },\n      reset() {\n        this.position = ''\n        this.width = 'auto'\n        this.active = false\n        this.isSticky = false\n      },\n      handleScroll() {\n        const width = this.$el.getBoundingClientRect().width\n        this.width = width || 'auto'\n        const offsetTop = this.$el.getBoundingClientRect().top\n        console.log(offsetTop)\n\n        if (offsetTop < this.stickyTop) {\n          this.sticky()\n          if (offsetTop === 0) {\n            this.handleReset()\n          }\n          return\n        }\n        this.handleReset()\n      },\n      handleResize() {\n        if (this.isSticky) {\n          this.width = this.$el.getBoundingClientRect().width + 'px'\n        }\n      }\n    }\n  }\n</script>\n"]}]}